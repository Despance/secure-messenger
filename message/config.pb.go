// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.31.1
// source: message/config.proto

package message

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Envelope_MessageType int32

const (
	Envelope_CHAT        Envelope_MessageType = 0
	Envelope_CERTIFICATE Envelope_MessageType = 1
	Envelope_ACK         Envelope_MessageType = 2
	Envelope_OTHER       Envelope_MessageType = 3
)

// Enum value maps for Envelope_MessageType.
var (
	Envelope_MessageType_name = map[int32]string{
		0: "CHAT",
		1: "CERTIFICATE",
		2: "ACK",
		3: "OTHER",
	}
	Envelope_MessageType_value = map[string]int32{
		"CHAT":        0,
		"CERTIFICATE": 1,
		"ACK":         2,
		"OTHER":       3,
	}
)

func (x Envelope_MessageType) Enum() *Envelope_MessageType {
	p := new(Envelope_MessageType)
	*p = x
	return p
}

func (x Envelope_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Envelope_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_config_proto_enumTypes[0].Descriptor()
}

func (Envelope_MessageType) Type() protoreflect.EnumType {
	return &file_message_config_proto_enumTypes[0]
}

func (x Envelope_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Envelope_MessageType.Descriptor instead.
func (Envelope_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_message_config_proto_rawDescGZIP(), []int{0, 0}
}

type Envelope struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      Envelope_MessageType   `protobuf:"varint,1,opt,name=type,proto3,enum=securechat.Envelope_MessageType" json:"type,omitempty"`
	Sequence  uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_Chat
	//	*Envelope_Cert
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_message_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_message_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_message_config_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetType() Envelope_MessageType {
	if x != nil {
		return x.Type
	}
	return Envelope_CHAT
}

func (x *Envelope) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Envelope) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetChat() *ChatMessage {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_Chat); ok {
			return x.Chat
		}
	}
	return nil
}

func (x *Envelope) GetCert() *CertificateMsg {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_Cert); ok {
			return x.Cert
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_Chat struct {
	Chat *ChatMessage `protobuf:"bytes,4,opt,name=chat,proto3,oneof"`
}

type Envelope_Cert struct {
	Cert *CertificateMsg `protobuf:"bytes,5,opt,name=cert,proto3,oneof"`
}

func (*Envelope_Chat) isEnvelope_Payload() {}

func (*Envelope_Cert) isEnvelope_Payload() {}

type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Nonce         []byte                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Ciphertext    []byte                 `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_message_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_message_config_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ChatMessage) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ChatMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ChatMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type CertificateMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        uint32                 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Cert          []byte                 `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMsg) Reset() {
	*x = CertificateMsg{}
	mi := &file_message_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMsg) ProtoMessage() {}

func (x *CertificateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_message_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMsg.ProtoReflect.Descriptor instead.
func (*CertificateMsg) Descriptor() ([]byte, []int) {
	return file_message_config_proto_rawDescGZIP(), []int{2}
}

func (x *CertificateMsg) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CertificateMsg) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

var File_message_config_proto protoreflect.FileDescriptor

const file_message_config_proto_rawDesc = "" +
	"\n" +
	"\x14message/config.proto\x12\n" +
	"securechat\"\xa4\x02\n" +
	"\bEnvelope\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .securechat.Envelope.MessageTypeR\x04type\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\x04R\bsequence\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x12-\n" +
	"\x04chat\x18\x04 \x01(\v2\x17.securechat.ChatMessageH\x00R\x04chat\x120\n" +
	"\x04cert\x18\x05 \x01(\v2\x1a.securechat.CertificateMsgH\x00R\x04cert\"<\n" +
	"\vMessageType\x12\b\n" +
	"\x04CHAT\x10\x00\x12\x0f\n" +
	"\vCERTIFICATE\x10\x01\x12\a\n" +
	"\x03ACK\x10\x02\x12\t\n" +
	"\x05OTHER\x10\x03B\t\n" +
	"\apayload\"m\n" +
	"\vChatMessage\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x1e\n" +
	"\n" +
	"ciphertext\x18\x04 \x01(\fR\n" +
	"ciphertext\"<\n" +
	"\x0eCertificateMsg\x12\x16\n" +
	"\x06length\x18\x01 \x01(\rR\x06length\x12\x12\n" +
	"\x04cert\x18\x02 \x01(\fR\x04certB\n" +
	"Z\b/messageb\x06proto3"

var (
	file_message_config_proto_rawDescOnce sync.Once
	file_message_config_proto_rawDescData []byte
)

func file_message_config_proto_rawDescGZIP() []byte {
	file_message_config_proto_rawDescOnce.Do(func() {
		file_message_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_config_proto_rawDesc), len(file_message_config_proto_rawDesc)))
	})
	return file_message_config_proto_rawDescData
}

var (
	file_message_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_message_config_proto_msgTypes  = make([]protoimpl.MessageInfo, 3)
	file_message_config_proto_goTypes   = []any{
		(Envelope_MessageType)(0), // 0: securechat.Envelope.MessageType
		(*Envelope)(nil),          // 1: securechat.Envelope
		(*ChatMessage)(nil),       // 2: securechat.ChatMessage
		(*CertificateMsg)(nil),    // 3: securechat.CertificateMsg
	}
)

var file_message_config_proto_depIdxs = []int32{
	0, // 0: securechat.Envelope.type:type_name -> securechat.Envelope.MessageType
	2, // 1: securechat.Envelope.chat:type_name -> securechat.ChatMessage
	3, // 2: securechat.Envelope.cert:type_name -> securechat.CertificateMsg
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_message_config_proto_init() }
func file_message_config_proto_init() {
	if File_message_config_proto != nil {
		return
	}
	file_message_config_proto_msgTypes[0].OneofWrappers = []any{
		(*Envelope_Chat)(nil),
		(*Envelope_Cert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_config_proto_rawDesc), len(file_message_config_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_config_proto_goTypes,
		DependencyIndexes: file_message_config_proto_depIdxs,
		EnumInfos:         file_message_config_proto_enumTypes,
		MessageInfos:      file_message_config_proto_msgTypes,
	}.Build()
	File_message_config_proto = out.File
	file_message_config_proto_goTypes = nil
	file_message_config_proto_depIdxs = nil
}
